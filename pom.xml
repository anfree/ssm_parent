<!-- pom.xml的根元素project -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <!-- 指定当前的pom版本 -->
    <modelVersion>4.0.0</modelVersion>
    <!-- 反写的组织名+项目名 -->
    <groupId>org.free.ssm</groupId>
    <!-- 项目名+模块名 -->
    <artifactId>ssm_parent</artifactId>
    <!-- 打包方式，默认是jar -->
    <packaging>war</packaging>
    <!-- 第一个0：表示大版本号；第二个0：表示分支版本号；第三个0：表示小版本号；
     snapshot 快照； alpha 内部测试； beta公测； Release稳定； GA正式发布 -->
    <version>0.0.1-SNAPSHOT</version>
    <!-- 项目描述名 -->
    <name>ssm parent</name>
    <!-- 项目地址 -->
    <url>http://maven.apache.org</url>
    <!-- 项目描述 -->
    <description>这是一个完全自由的项目。</description>
    <!-- 贡献该项目的作者列表 -->
    <developers>
        <developer>
            <name>LuckyRiver Zeng</name>
            <email>zengxiangjiang@aliyun.com</email>
        </developer>
    </developers>

    <!-- 依赖的jar包列表 -->
    <build>
        <!-- 插件列表 -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>${java.version}</source><!-- 源代码使用的JDK版本 -->
                    <target>${java.version}</target><!-- 需要生成的目标class文件的编译版本 -->
                    <encoding>${project.build.sourceEncoding}</encoding><!-- 字符集编码 -->
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- 依赖的管理
    (可以包含多个依赖，但是不会被运行，即不会被引用到实际依赖，主要供子模块使用） -->
   <!-- <dependencyManagement>
        <dependencies>
            <dependency>
            </dependency>
        </dependencies>
    </dependencyManagement>-->

    <!-- 为构建行为提供相应的支持 -->
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <!-- 该jar包的依赖范围 -->
            <scope>test</scope>
            <!-- 设置依赖是否可选 -->
            <!--<optional></optional>-->
            <!-- 排除依赖传递列表 -->
            <!--<exclusions>
                <exclusion>
                </exclusion>
            </exclusions>-->
        </dependency>

        <!-- 补全项目依赖 -->
        <!-- 1.日志 java日志：slf4j，log4j，logback, common-logging
            slf4j 是接口/规范
            日志实现：log4j， logback等
        -->
        <!--<dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${logback.version}</version>
        </dependency>-->
        <!-- 实现slf4j接口并整合 -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <!-- 2.数据库相关依赖 -->
        <!-- 数据库驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.29</version>
            <scope>runtime</scope>
        </dependency>
        <!-- 数据库连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.9</version>
        </dependency>

        <!-- DAO框架：MyBatis依赖 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <!-- MyBatis自身实现的Spring整合依赖 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.3.0</version>
        </dependency>

        <!-- 3.servlet web相关依赖 -->
        <!-- jstl标签库 -->
        <!--<dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        </dependency>-->
        <!-- json -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.6.3</version>
        </dependency>

        <!-- 4.Spring依赖 -->
        <!-- 1）spring核心依赖 -->
        <!-- spring最核心的包 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- spring ioc.beans提供了一些bean相关的依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- spring扩展依赖，包扫描等等 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- 2）spring dao层依赖 -->
        <!-- spring jdbc提供的一个数据库事物管理器 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- spring的声明式事物transaction -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- 3）spring web相关的依赖 -->
        <!-- java web工程要通过servlet容器（tomcat，jetty）去启动
            启动时，servlet容器需要加载spring ioc、aop来启动spring的工厂
            那么这时候就需要spring-web的aplicationContext api来提供支持
         -->
        <!--<dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>-->
        <!-- springmvc框架的依赖 -->
        <!--<dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>-->
        <!-- 4)spring test相关依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- spring -->

        <!-- redis客户端 -->
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>2.9.0</version>
        </dependency>
        <!-- protostuff序列化依赖 -->
        <dependency>
            <groupId>com.dyuproject.protostuff</groupId>
            <artifactId>protostuff-core</artifactId>
            <version>1.0.10</version>
        </dependency>
        <dependency>
            <groupId>com.dyuproject.protostuff</groupId>
            <artifactId>protostuff-runtime</artifactId>
            <version>1.0.10</version>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.17.0</version>
        </dependency>

        <!-- direct add java rabbit mq client -->
        <dependency>
            <groupId>com.rabbitmq</groupId>
            <artifactId>amqp-client</artifactId>
            <version>5.21.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.rabbitmq/stream-client -->
        <dependency>
            <groupId>com.rabbitmq</groupId>
            <artifactId>stream-client</artifactId>
            <version>0.16.0</version>
        </dependency>
        <!-- or add spring rabbit mq client -->
        <!--<dependency>
            <groupId>org.springframework.amqp</groupId>
            <artifactId>spring-rabbit</artifactId>
            <version>1.2.2.RELEASE</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-tx</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.rabbitmq</groupId>
            <artifactId>amqp-client</artifactId>
            <version>3.1.3</version>
        </dependency>-->

    </dependencies>

    <!-- 子模块对父maven模块pom的继承 -->
    <!--<parent></parent>-->

    <!-- 一次编译多个maven模块 -->
    <!--<modules>
        <module></module>
    </modules>-->

    <!-- 对应dependency里面OGNL表达式${*.*}的值 -->
    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <resource.delimiter>@</resource.delimiter>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <skipTests>true</skipTests><!--添加为true，则跳过测试直接打包 -->
        <!-- spring版本号 -->
        <spring.version>4.3.1.RELEASE</spring.version>
        <!-- mybatis版本号 -->
        <mybatis.version>3.4.1</mybatis.version>
        <!-- slf4j + logback日志框架版本号 -->
        <slf4j.version>1.7.21</slf4j.version>
        <logback.version>1.2.3</logback.version>
    </properties>

</project>
